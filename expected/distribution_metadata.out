-- ===================================================================
-- create test functions
-- ===================================================================
CREATE FUNCTION test_distribution_metadata(oid)
	RETURNS void
	AS 'pg_shard', 'TestDistributionMetadata'
	LANGUAGE C STRICT;
-- ===================================================================
-- test distribution metadata functionality
-- ===================================================================
CREATE TABLE events (
	id bigserial,
	name text
);
INSERT INTO pgs_distribution_metadata.shard
	(relation_id, min_value, max_value)
VALUES
	('events'::regclass, '0', '10'),
	('events'::regclass, '10', '20'),
	('events'::regclass, '20', '30'),
	('events'::regclass, '30', '40');
INSERT INTO pgs_distribution_metadata.placement
	(node_name, node_port, shard_id)
VALUES
	('foo', 123, 1),
	('foo', 123, 2),
	('bar', 456, 3),
	('bar', 456, 4);
INSERT INTO pgs_distribution_metadata.partition_strategy (relation_id, key)
VALUES
	('events'::regclass, 'name');
SELECT test_distribution_metadata('events'::regclass);
INFO:  Table is partitioned using column #2, which is of type "text"
INFO:  Found 4 shards...
INFO:  Shard #4
INFO:  	relation:	events
INFO:  	min value:	30
INFO:  	max value:	40
INFO:  	1 placements:
INFO:  		Placement #4
INFO:  			shard:	4
INFO:  			node name:	bar
INFO:  			node port:	456
INFO:  Shard #3
INFO:  	relation:	events
INFO:  	min value:	20
INFO:  	max value:	30
INFO:  	1 placements:
INFO:  		Placement #3
INFO:  			shard:	3
INFO:  			node name:	bar
INFO:  			node port:	456
INFO:  Shard #2
INFO:  	relation:	events
INFO:  	min value:	10
INFO:  	max value:	20
INFO:  	1 placements:
INFO:  		Placement #2
INFO:  			shard:	2
INFO:  			node name:	foo
INFO:  			node port:	123
INFO:  Shard #1
INFO:  	relation:	events
INFO:  	min value:	0
INFO:  	max value:	10
INFO:  	1 placements:
INFO:  		Placement #1
INFO:  			shard:	1
INFO:  			node name:	foo
INFO:  			node port:	123
 test_distribution_metadata 
----------------------------
 
(1 row)

